import Head from "next/head";
import { useEffect, useState } from "react";
import { useRouter } from "next/dist/client/router";
import Button from "../../../components/Button";
import useUser from "../../../hooks/useUser";

import { addTweet, uploadImage } from "../../../firebase/client";
import Avatar from "../../../components/Avatar";
import ArrowLeft from "../../../components/Icons/ArrowLeft";
import Navbar from "../../../components/Navbar";

const COMPOSE_STATUS = {
  USER_NOT_KNOWN: 0,
  LOADING: 1,
  SUCCESS: 2,
  ERROR: -1,
};

const DRAG_IMAGE_STATES = {
  ERROR: -1,
  NONE: 0,
  DRAG_OVER: 1,
  UPLOADING: 2,
  COMPLETE: 3,
};

export default function ComposeTweet() {
  const [message, setMessage] = useState("");
  const [status, setStatus] = useState(COMPOSE_STATUS.USER_NOT_KNOWN);

  const [drag, setDrag] = useState(DRAG_IMAGE_STATES.NONE);
  const [task, setTask] = useState(null);
  const [imgURL, setImgURL] = useState(null);

  const user = useUser();
  const router = useRouter();

  useEffect(() => {
    if (task) {
      const onProgress = () => {};
      const onError = () => {};
      const onComplete = () => {
        task.snapshot.ref.getDownloadURL().then(setImgURL);
      };
      task.on("state_changed", onProgress, onError, onComplete);
    }
  }, [task]);

  const handleChange = (e) => {
    const { value } = e.target;
    setMessage(value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setStatus(COMPOSE_STATUS.LOADING);
    addTweet({
      avatar: user.avatar,
      content: message,
      userId: user.uid,
      img: imgURL,
      userName: user.username,
    })
      .then(() => {
        router.push("/home");
      })
      .catch(() => {
        setStatus(COMPOSE_STATUS.ERROR);
      });
  };

  const handleDragEnter = (e) => {
    e.preventDefault();
    setDrag(DRAG_IMAGE_STATES.DRAG_OVER);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setDrag(DRAG_IMAGE_STATES.NONE);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setDrag(DRAG_IMAGE_STATES.NONE);
    const file = e.dataTransfer.files[0];
    setTask(uploadImage(file));
  };

  const isButtonDisabled = !message.length || status === COMPOSE_STATUS.LOADING;

  return (
    <>
      <Head>
        <title>Publicar un nuevo Tweet / Twitter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.svg" />
      </Head>

      <header>
        <div onClick={router.back} role="button" tabIndex={0}>
          <ArrowLeft width={19} height={19} stroke="#0F1419" />
        </div>
        <Button form="TweetForm" type="submit" disabled={isButtonDisabled}>
          Twittear
        </Button>
      </header>
      <section className="form-container">
        {user && (
          <section className="avatar-container">
            <Avatar src={user.avatar} />
          </section>
        )}
        <form id="TweetForm" onSubmit={handleSubmit}>
          <textarea
            onChange={handleChange}
            onDragEnter={handleDragEnter}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
            placeholder="¿Qué está pasando?"
            value={message}
          />
          {imgURL && (
            <section className="remove-img">
              <button onClick={() => setImgURL(null)}>x</button>
              <imga alt="Tweet image" src={imgURL} />
            </section>
          )}
        </form>
      </section>
      <Navbar />

      <style jsx>{`
        header {
          align-items: center;
          backdrop-filter: blur(5px);
          background: #ffffffaa;
          border-bottom: 1px solid #eee;
          display: flex;
          height: 49px;
          justify-content: space-between;
          padding: 0 15px;
          position: sticky;
          top: 0;
          width: 100%;
        }

        button {
          background: rgba(0, 0, 0, 0.3);
          border: 0;
          border-radius: 999px;
          color: #fff;
          cursor: pointer;
          font-size: 24px;
          width: 32px;
          height: 32px;
          top: 15px;
          position: absolute;
          right: 14px;
        }

        .remove-image {
          position: relative;
        }

        .form-container {
          align-items: flex-start;
          display: flex;
          flex: 1;
        }

        .avatar-container {
          padding-top: 20px;
          padding-left: 20px;
        }

        div {
          align-items: center;
          display: flex;
          cursor: pointer;
        }

        form {
          padding: 10px;
          width: 100%;
        }

        img {
          border-radius: 10px;
          height: auto;
          width: 100%;
        }

        textarea {
          border: ${drag === DRAG_IMAGE_STATES.DRAG_OVER
            ? "3px dashed #09f"
            : "3px solid transparent"};
          border-radius: 10px;
          font-size: 21px;
          min-height: 200px;
          outline: 0;
          padding: 15px;
          resize: none;
          width: 100%;
        }
      `}</style>
    </>
  );
}
